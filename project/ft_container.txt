ft_container.txt

# why?
이 과제를 진행하면서 iterator에 대해 깊게 이해할 수 있을 것이다.
    이 이해를 바탕으로 나도 확장성 있는 코드를 작성하는 능력을 얻을 수 있을 것이다.
    container는 cpp의 기본격이다.
    cpp를 배우는 사람으로서 container를 깊게 이해하지 않는 다는 것은 말이 되지 않는다.
    나는 common core를 돌파해야만 한다.
그냥 하는거다 살려고 하는거다 42과정을 돌파해야만 한다.
    그냥 일단은 하라는 걸 하는거다.
    그걸로 충분하다.

# pc
새로 추가한 bst_node::makeConnectToChild()를 remove()에 추가하기
primitive bst의 remote() 구현하기
__tree의 compare는 map에서 value_compare를 넣어주는데 이게 어떻게 작동하며 set과 map 간에 어떤 차이를 가지고 작동하는지 읽어보기
__tree의 iterator가 randomaccess_iterator일까?
    c++98 spec에는 reverse_iterator의 template argument인 iterator type이 random_access_iterator여야 한다고 한다.
    24.4.1.2:2
조사
    map
    set
    __tree
vector(InputIt first, InputIt last, const Allocator& alloc = Allocator())
    를 좋은 블로그에서 본 것처럼 template을 바꾸자
        spec에서 보니 prototype의 강제성은 없는 것 같다.
        그런데 이렇게 하면 제한이 들어가서 좋기는 한데, is_convertible이 C++11이라 이 과제에서는 사용하지 않는 것이 좋을 것 같다.
iterator 구현할 내용 계속 진행하면서 추가하기
c++11의 사용을 최소화하기 위해
    type_traits:is_integral에서 사용한 struct remove_cv를 제거해보기
struct has_iterator_typedef의 value를 계산할 때 test()의 인자를 아무것도 주지 않으면 어떻게 될까?
std::vector의 make_iter가 실행될 때 __wrap_iter의 어떤 constructor를 호출하는지 확인하기
wrap_iter 구현하기
    wrap_iter 대신 이름을 iterator라고 해야 할까?
vector prototype 구현하기
iterator도 만들어야 할까? 그렇다.
    subject
    c++ spec
    implementation
    cppreference
container tester 돌리기(42 notion, slack 검색)

# finish
bst_node와 bst의 debugDescription()을 작성하고 있었다.
sfinae wiki부터 읽기
cpp primer plus에서 template 읽고 작동 방식 다시 이해하기
iterator 파헤치기
    wrap_iter가 'pour.txt:2022-06-22' 에 작성한 생각과 같을까?
    실제 다양한 type의 iterator data type이 존재할 수 있고, 이들을 template으로 규격을 통일한 것이 iterator_traits이다.
    그리고 이 iterator_traits를 사용하여 wrap_iter를 만든다.
