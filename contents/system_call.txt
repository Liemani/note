#system_call summary

<string.h>
	void	*memset(void *b, int c, size_t len);

<stdio.h>
	int		printf(const char * restrict format, ...);

<unistd.h>
	int		usleep(useconds_t microseconds);
		typedef unsigned int useconds_t:
	pid_t	getpid(void);


<sys/time.h>
	int		gettimeofday(struct timeval *restrict tp, void *restrict tzp);
		struct timeval
		{
			time_t		tv_sec;
			suseconds_t	tv_usec;
		};
				typedef long time_t;
				typedef int suseconds_t;

<pthread.h>
	int		pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
		typedef struct							_opaque_pthread_t
		{
			long								__sig;
			struct __darwin_pthread_handler_rec	*__cleanup_stack;
			char								__opaque[__PTHREAD_SIZE__];
		}										*pthread_t;

		struct		__darwin_pthread_handler_rec
		{
			void								(*__routine)(void *);
			void								*__arg;
			struct __darwin_pthread_handler_rec	*__next;
		};

		typedef struct	_opaque_pthread_attr_t
		{
			long		__sig;
			char		__opaque[__PTHREAD_ATTR_SIZE__];
		}				pthread_attr_t;
	int		pthread_detach(pthread_t thread);
	int		pthread_join(pthread_t thread, void **value_ptr);
	int		pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
		typedef struct	_opaque_pthread_mutex_t
		{
			long		__sig;
			char		__opaque[__PTHREAD_MUTEX_SIZE__];
		}				pthread_mutex_t;

		typedef struct	_opaque_pthread_mutexattr_t
		{
			long		__sig;
			char		__opaque[__PTHREAD_MUTEXATTR_SIZE__];
		}				pthread_mutexattr_t;
	int		pthread_mutex_destroy(pthread_mutex_t *mutex);
	int		pthread_mutex_lock(pthread_mutex_t *mutex);
	int		pthread_mutex_unlock(pthread_mutex_t *mutex);
