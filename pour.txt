아래가 옛, 위가 최신

# 2021-05-05

- 테스트 환경 구성하여 테스트 진행
  - 이점: 원하는 값을 넣고 결과 값이 잘 나오는지 확인할 수 있다
  - 디버깅 툴과의 차이점
    - 디버깅 툴은 에러를 잡아내는 것: 실제 프로그램을 실행해볼 수 있지만 테스트에 비해 부담스럽고 값을 원하는데로 마구 넣어보기 번거롭다
- 프로그래머가 하는 일은 글을 쓰는 것이다. 문체도 물론 중요하지만 가장 중요한 것은 얼마나 방대한 세상을 가지고 있느냐 하는 것이다. 그리고 그것을 글로 잘 풀어냈는가이다
- 프로그램을 만드는 과정에는 재밌는 과정도 있고 재미 없는 과정도 있다. 다소 재미 없는 과정이라면 그 과정에 당신의 꿈을 담아라
  - 가령 특정 파일을 파싱하는 기능을 추가하거나, 출력된 이미지를 파일로 저장하는 기능을 추가하는 작업은 지루할 수 있다. 하지만 그것이 불가능한 경우와 가능한 경우를 생각하면서 있으면 정말 좋겠다고 생각을 하는 것이다
- 평면 도형의 normal 과 ray 의 direction_vector 과 수직인 경우 intersects, blocks 는 어떻게 처리해야 할까?
  - 평면 도형의 두께는 0 으로 생각하자
- antialising 말고 테두리 픽셀의 절확한 밀도를 계산해서 출력하면 어떨까?
- rgb 소자들이 뭉쳐 하나의 픽셀 을 보는 것처럼, 여러 픽셀들이 뭉쳐 하나의 점을 볼 수도 있다. 이로 인해 픽셀 단위의 단절된 이미지를 자연스럽게 만들 수 있다
- 기울기가 정확히 축과 평한한 경우 등 double 의 오차로 인해 충돌 여부가 판가름 나는 수도 있다. 이런 경우는 따로 처리하지 않겠다. 처리를 하는 것도 야매로 가능하지 정확한 계산은 불가능해 보인다 (이미 정확히 계산한 결과가 저런 것이다)
  - 마찬가지로, 오차로 인한 그림자 여부도 추가로 잡아주지는 않겠다
- [BMP file format](https://en.wikipedia.org/wiki/BMP_file_format)
  - bitmap 은 더 포괄적인 의미이고 BMP 는 bitmap 중 특정 포멧이다
  - 아마 최적화를 위해 프로그램 내부적으로 사용되는 이미지는 자신만의 bitmap 데이터 타입을 정의하는 모양이다

# 2021-05-04

- 빛이 평면 위의 점일 경우를 잘 처리해주자
- 일단 돌아가는 프로그램을 작성하라, 그리고 계속 보다보면, 그리고 반복해서 작성하다 보면, 최적화를 할만한 부분이 보인다!
  - 물론 최소한의 계획은 가지고 프로그램을 작성해야 한다
    - (최소한의 계획이라는 녀석은 주관적이다)
- 제대로 표현하지 않으면 어차피 나중에 계속 후회한다
  - 일단 내 잘못이면 나중에 후회할 확률이 높다 문젝 없더라도 사과하는 것이 맞다 그게 맞다
- x 와 z 가 모두 0 인 카메라 orientation 을 받을 때 xz_magnitude 가 0 이 되어 0 으로 나누게 되는 문제

# 2021-05-03

- 공유의 목적이 아닌 기록 및 보관 용도로는 잘 꾸미는 데에 시간을 투자할 필요가 없으므로 (최소한의 가독성 확보가 목표이다) md 포멧보다는 txt 포멧을 사용하는 것이 유리하다
- 우연히 발견한 것이지만 double 의 오차로 랜덤하게 0 또는 1 을 생성할 수 있을 것 같다
- pow 의 남발을 지양하고 sqrt 와 * 를 사용하자

- geometry 위의 어떤 점 P 가 line 과 geometry 가 만나는 가장 가까운 점인지를 확인하기 위해 intersects 만으로는 부족하다. intersects 는 가장 가까운 k 값을 반환하지만, 가장 가까운 점이 P 일 때 P 를 위한 k 값과 가장 가까운 k 값을 비교하면 double 타입이기 때문에 오차로 인해 같은지 판단하는건 부정확하다. 따라서 도형마다 어떤 점이 도형 위에 있는 점이라고 가정하고, 그 점이 빛을 받는 점인지 확인할 수 있도록 추가적인 함수를 둬야 좋겠다
- reference type 은 instance method 의 첫 인자로 instance 를 받고,  value type 은 instance method 의 마지막 인자로 instance 를 받도록 하면 좋을 것 같다
- vector3_init() 추가
- vector3_cos_theta() 추가
- 빛의 세기는 거리의 제곱에 반비례한다
  - 이 경우 특정 부위는 과하게 밝게 표현단다
    - 이를 해결하기 위해서는 2 차 3 차 반사를 적용해야 한다
- 삼각형은 각도록 점의 위치가 안에 있는지 밖에 있는지를 구분했다
