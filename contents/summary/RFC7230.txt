RFC7230.txt

1. Introduction
1.1. Requirements Notation
1.2. Syntax Notation
2. Architecture
2.1. Client/Server Messaging
2.2. Implementation Diversity
2.3. Intermediaries
2.4. Caches
2.5. Conformance and Error Handling
2.6. Protocol Versioning
2.7. Uniform Resource Identifiers
2.7.1. http URI Scheme
2.7.2. https URI Scheme
2.7.3. http and https URI Normalization and Comparison
3. Message Format
3.1. Start Line
3.1.1. Request Line
3.1.2. Status Line
3.2. Header Fields
3.2.1. Field Extensibility
3.2.2. Field Order
	순서는 중요하지 않다.
	control data를 가진 header field들을 우선적으로 보내는 것이 좋은 습관이다.
		ex) 'Host' in request, 'Data' on response
	그러면 수신자는 message를 수신할지 말지를 빠르게 판단할 수 있는 가능성이 생긴다.
	server는 MUST NOT 전체 request header section을 수용하기 전에 request를 target resource에 적용하는 것을, 왜냐하면, 나중에 나오는 header field 중에 conditional, authentication credential, deliberately misleading duplicate header field that would impact request processing을 포함할지도 모르기 때문이다.
	sender는 MUST NOT 같은 field name을생성하는 것을.

3.2.3. Whitespace
3.2.4. Field Parsing
	message/http media type[RFC7230.8.3.1]이 아닌 경우 'obs-fold'는 deprecated이다.
	message/http가 아닌데 obs-fold를 가지는 request message를 server가 수신하는 경우 400을 송신하면서 message를 reject해야 한다.

3.2.5. Field Limits
	header field마다 길이 제한이 있지는 않다.

3.2.6. Field Value Components
3.3. Message Body
	message body를 읽을지 말지는 request와 response가 서로 다르다.
	request message에서 Content-Length나 Transfer-Coding 헤더 필드가 있으면 message body가 있다는 신호이다.
	request message frame은 method와는 독립적이다.
	method가 body의 쓰임을 정의하지 않더라도.
	response message의 body 존재 여부는 response를 발생시킨 request와, response의 status code로 결정된다.

3.3.1. Transfer-Encoding
	Transfer-Encoding: gzip, chunked
		message body가 gzip으로 compress된 후 chunked coding으로 chunked됨을 의미
	구현하지 않은 transfer coding request message를 받으면 501로 응답해야 한다.(SHOULD)

3.3.2. Content-Length
	message가 Transfer-Encoding header field를 가지고 있지 않으면 Content-Length header field가 payload body의 예상되는 잠재적 크기를 제공할 수 있다.
	Transfer-Encoding header field를 가지는 message에는 Content-Length header field를 보내지 않아야 한다.(MUST NOT)
	user agent: Transfer-Encoding이 없고 request method가 payload body를 정의할 때 user agent는 request message에 Content-Length를 보내야 한다.
	Content-Length의 value는 정해진 한계가 없기 때문에 parsing할 때 int type을 사용하면 overflow가 날 수 있다.

3.3.3. Message Body Length
	Transfer-Encoding header field와 Content-Length header field의 각 경우에 따른 구체적인 처리
3.4. Handling Incomplete Messages
3.5. Message Parsing Robustness
4. Transfer Codings
4.1. Chunked Transfer Coding
4.1.1. Chunk Extensions
4.1.2. Chunked Trailer Part
4.1.3. Decoding Chunked
4.2. Compression Codings
4.2.1. Compress Coding
4.2.2. Deflate Coding
4.2.3. Gzip Coding
4.3.
4.4. Trailer
5. Message Routing
5.1. Identifying a Target Resource
5.2. Connecting Inbound
5.3. Request Target
5.3.1. origin-form
5.3.2. absolute-form
5.3.3. authority-form
5.3.4. asterisk-form
5.4. Host
5.5. Effective Request URI
	absolute form of target URI와 같다.
5.6. Associating a Response to a Request
5.7. Message Forwarding
5.7.1. Via
5.7.2. Transformations
6. Connection Management
6.1. Connection
	Connection: close
	persistent connection을 지원하지 않는 client는 request message에 매번 close connecion option을 보내야 한다.
	마찬가지로 persistent connection을 지원하지 않는 server는 1xx 상태 코드가 아닌 response message에 매번 close connection option을 보내야 한다.

6.2. Establishment
6.3. Persistence
6.3.1. Retrying Requests
6.3.2. Pipelining
6.4. Concurrency
6.5. Failures and Timeouts
6.6. Tear-down
	server가 TCP 연결을 바로 close 해버리면 client가 마지막 HTTP response message를 읽지 못할 위험이 있다.

6.7. Upgrade
7. ABNF List Extension: #rule
8. IANA Considerations
8.1. Header Field Registration
8.2. URI Scheme Registration
8.3. Internet Media Type Registration
8.3.1. Internet Media Type message/http
8.3.2. Internet Media Type application/http
8.4. Transfer Coding Registry
8.4.1. Procedure
8.4.2. Registration
8.5. Content Coding Registration
8.6. Upgrade Token Registry
8.6.1. Procedure
8.6.2. Upgrade Token Registration
9. Security Considerations
9.1. Establishing Authority
9.2. Risks of Intermediaries
9.3. Attacks via Protocol Element Length
9.4. Response Splitting
9.5. Request Smuggling
9.6. Message Integrity
9.7. Message Confidentiality
9.8. Privacy of Server Log Information
10. Acknowledgments
11. References
11.1. Normative References
11.2. Informative References
Appendix A. HTTP Version History
A.1. Changes from HTTP/1.0 
A.1.1.  Multihomed Web Servers
A.1.2.  Keep-Alive Connections
A.1.3.  Introduction of Transfer-Encoding
A.2.  Changes from RFC 2616
Appendix B. Collected ABNF
Index
