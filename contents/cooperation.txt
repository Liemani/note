#cooperation

# 물리
기간을 주 단위로 계획하고 진행하고 회고하기
첫 주 정도는 아무 것도 존재하는 것이 없기 때문에 같이 구조 짜고 굵직한 뼈대 만들면서 할 일 분배하기

# 마인드
자신이 할 일 뿐만 아니라, 왜 하는지, 실제 어떻게 적용되는지, 우리의 프로그램은 대략 어떻게 작동하는지를 동시에 이해해야 한다

# 팀원 모집
- 팀원과의 일정을 어떻게 관리해야 할까?
- 서로 코드를 보는 것은 2 단계로 나눠서 한다.
	- 첫 단계는 간단한 수준을 빠르게 나눠보고
	- 두 번째 단계에서는 더 낮은 사람이 먼저 자신의 코드를 설명한다
- 프로젝트의 특성에 따라 webserv 나 ft_irc 의 경우 빨리 프로덕트를 만드는게 중요한 것이 아니기 때문에 가능하면 뿌리까지 면밀히 공부하며 완성해나갈 예정
팀원들은 기간 중에 행하는 행동에 대해 왜 하는지 가능한 한 모두 이해릃 하면서 할 것입니다.
애자일 향
- 매일 데일리 미팅을 할 텐데, 참여 가능해야 한다.
- 초반에 계획을 세우고 진행을 하고 회고를 할 것이다.
	- 이게 취향에 맞거나 아니면 최소한 설명을 들어보고 같이 참여할 의사가? 있는 분
가장 진행이 매끄러울 것 같은 사람이 진행을 하되, 모든 부담을 안겨주지는 말고, 좋은 의견이 있다면 항상 제시받자
서로의 코드를 비교해보고 한 명의 가장 꼼꼼한 사람이 코드 매니저를 맡자
네임 컨벤션부터 정하기 시작해서 한 사람이 짠 코드처럼 작성해나갈 것입니다.
git pull request 를 사용할 것입니다.
아직 이런 내용들을 잘 모르시더라도 진지하게 배우며 프로그래밍을 해 볼 의사가 있는 분은 연락주세욥.
쉬운 파트는 일부러 넘어가면서 다른 팀원에게 할 일을 만들어주기
작동이 검증된 코드를 추가하는 방식으로 진행
oop 개념을 알고 모듈화를 좋아한다
어느정도로 구현할지 (서브젝트 제한 or 구현하고 싶은 만큼)
상대의 코딩 관심사가 무엇인지 확인해두자
	나는 abstract class 등을 만드는 것을 좋아한다
선택의 기로에 있을 때 모든 팀원이 의견을 제시하도록 한다
같은 fd 에 부모 쓰고 자식 쓰고 하면 다 써지나?
지금 당장 훌륭하지는 않지만 꾸준히 어제보다 나은 자신이 되도록 노력할 수 있는 분
문제가 있을 때 주변을 탓하기 전에 자신의 변화로 다음에 문제가 발생하지 않을 방법을 생각해볼 수 있는 분
의사소통 문제가 발생하더라도 다음에 같은 문제가 발생하지 않을 해결 방안을 탐구하고 적용할 수 있는 분
프로토콜은 여러 사람이 같이 작업하기 위해 꼭 필요하다
	구조체를 프로토콜화하여 내부 데이터를 약속해서 저장하면 다른 사람이 코드를 볼 때 내부 구현을 보면서 구조체 내부에 어떤 값이 들어가는지 확인 할 필요가 없어진다
서로 대화하면서 상처를 받을 수도 있을텐데, 그런 경우에도 서로를 포기하지 않고 서로를 이해하려 노력하며 더 상처를 덜 주는 방법을 배우면서 같이 성장할 수 있는 분
시작한다 -> 하고 싶은 부분을 한다 -> 필요한 부분을 요청한다 -> 완료 or 인수
개인적으로 쓰던 라이브러리 함수를 가져와서 사용하는 경우..?
같이 공통으로 필요한 함수가 있는지 체크하고 정의하기
	한 명이 util 라이브러리를 관리해도 좋을 것 같다
constant file 만들어서 공통된 상수를 사용하도록 하기
여러 명이 협업을 진행하게 되면 코드의 온전성이 중요해질 것 같다
	- 테스트를 하여 온전하게 작동하는 코드인지를 확실하게 하고 추가하는 것이다
테스트 케이스를 만들어두고, 깃에 merge 를 할 때는 그 테스트 케이스를 전부 통과한 코드만 가능하다.
- 공동의 목표를 합의하에 설정해야 한다.
	- 그래야 목표 달성을 위해 거침없이 달려갈 수 있다.
- 피드백이 활발해야 한다. 그래야 괜찮은지 않은지 기준을 설정할 수 있다.



# 모집

단순 프로젝트 외의 의사소통 등
문제가 발생했을 때 문제로부터 배우며 성장할 수 있고
문제로부터 배울점을 스스로 찾을 줄 알고
문제가 나를 더 성장시켜줄 것이라 믿으며
지치지 않고 문제를 바라볼 수 있는 긍정적인 분이었으면 좋겠습니다

클러스터에 주말 없이 하루 9 시간 이상 출석할 수 있는 분

아직 과제 한 두개 더 해야하더라도 괜찮습니다

환경의 힘을 믿는 분

시작 시 애불린 현상
불편은 서로 말해야한다? 서로 할 말은 해야 한다?
모두 납득해야 한다?

미니셸 팀원을 구합니다!
개포 클러스터에 주말 없이 하루 9 시간 이상 출석할 수 있는 분 환영합니다! (도시락 싸시는 분 대환영!!)
출석만 열심히 해주신다면 당장 등록을 못하더라도 2 써클에 과제 한두개 정도 남은 상황이어도 괜찮습니다!
가볍게 DM 주세요!

기간은 한 달 정도 예상합니다
특기: vim, shell script, git

가능하면 둘 다 개념을 이해하는 방식으로 진행하려고 합니다

프로젝트 속 프로젝트처럼 커리큘럼처럼 진행도 가능하다

말을 정정하셔도 되고 충분히 생각을 해보는 과정이 중요하다고 생각한다
물론 생각하는 중에도 상대의 물음에 어떤 대답은 반드시 해야 한다

상대가 이과형이면 이 부분을 더 얘기하고

상대가 문과형이면 

좋아보이면 왜 좋은지 어떤 점이 다른 것보다 더 나은지를 이유를 찾아라, 그것이 이후 선택의 기준이 된다

어떻게 생각하는지 계속 물어보자



# laboratory

## 각 팀원마다
궁금한 것이 있다면
저에게 이런이런 권리가 있을까요?
라는 식으로 질문을 올릴 수 있도록 하는 것은 어떨까? 각 팀원은 서로서로의 이런 질문에 O/X 를 체크할 수 있고, O 에 체크한 사람에게 있어 이 팀원은 해당 권리를 갖는거지
예시
	- 아키텍처인 팀원 A 가 있다고 하자. 자신의 질문 공간에 이런 질문을 올린다. "제게 다른 팀원에게 언제든지 궁금한 부분을 질문할 권리가 있을까요?" 이 질문에 대해 O 를 체크한 팀원에게는 팀원 A 가 질문을 언제든지 할 권리가 있는 것이 된다. 만약 상세한 부분일 제시하고 싶다면 이 쓰레드의 답글로 특정 시간 등 상세 내용을 제시하는 것이다. 가령 "저는 오후 4 시부터 5 시까지 질문 받을 수 있어요." 라는 답글을 달아서 서로의 상황을 파악하는 것이지
