#minishell

pc
	- t_lmt_process_list_method.c 와 lmt_process_method.c 에서 wait 잘 작동하도록 수정하기
	- 괄호가 다양한 컨트롤 연산자에 대해 잘 작동하는지 테스트 및 점검하기
	- bash 에서 sleep 100 을 ^C 로 멈추면 echo $? 가 130 을 출력하는데 왜 그런걸까?
	- wait() 을 호출하는 방식을 새로운 구조를 반영하도록 수정
	지금 exit || hi 는 뭔가 자식 프로세스에서 호출되는가 exit 을 하지 않는다.
		하지만 built-in command 는 파이프 전후 외에는 parent process 에서 실행되어야 한다.
	waitpid() 가 같은 pid 를 중복 호출했을 경우?, waitpid() 의 error return
	- 공책을 보고 그려보면서 가장 적절한 모델이 무엇일지 생각해보기
	아무래도 파일 시스템처럼 directory 와 file 이 존재하는 형식으로 작성해야 할 것 같다.
		- 왜? 왜 이렇게 생각한 거지? 이유가 뭐지?
			- || 와 && 를 처리할 때, 이전 process 의 결과값을 봐야 하는데, 지금은 subprocess 같은 개념을 사용하기 때문에, 이전 process 에 접근할 수가 없는 문제가 있다.
		- 이 기반을 위해 lmt_c_library 에 t_lmt_double_linked_list 를 작성중이었다.
	'echo 1 | echo 2 && echo 3 || echo 4' 가 정상 작동되도록 수정하기
	'void exit_with_perror_int(int number)' 를 lmt_error/ 안에만들자
	append_token_to_first() 가 target 과 source 가 같은 경우 발생하는 문제
		debug: echo hi
	작업이 끝난 후 dev fetch 하고 rebase 하기
	lmt_process_redirection.c 에서 errno 쓰나? include 확인해보기
	perror() 가 허용 함수가 아니다! strerror() 와 errno 로 바꿔서 사용하자
	- fork() 로 생성된 자식 프로세스가 sleep(100) 을 하고 있고, 이 때 부모 프로세스가 wait() 중인데 signal 로 인해 interupt 되었을 때 wait() 의 반환값?
		- 아니면 suspend 상태이기 때문에 WNOHANG 옵션을 주지 않는 이상 부모가 시그널을 받지 않는 것은 아닐까?
		- 만약 시그널로 자식 프로세스가 종료된다면 어떤 행동을 해야 할까?
	o remove lmt_process_list
	o circular double linked list 로 전환
	o lmt_process->type 이 TYPE_PROCESS_PARENTHESIS 일 때 해당 process->list 는 괄호 안의 lmt_process_list 의 주소를 가진다.



같이 봐야 할 내용
	- builtin command 가 값을 반환하도록
	- 보니까 echo 가 인자를 hand 에서 가져와서 사용하던데, 내가 그렇게 맞추는 방법은 있나?
	내 코드가 들어가는 것은 signal 관련 코드, 실제 실행하는 process_manager_execute() 코드
	프로그램 종료 코드는 어디에 저장하면 될까?
	redirection 이 path 를 string 으로만 처리하고 in 과 out 만 처리하도록 수정
	t_token 의 type 을 설정하는 부분이 있는가?
	어제 추가한 #include 를 minishell 에서 #include 하도록 수정하기



() 이전에 pipe 가 있을 때 pipe 의 연결 문제
close() guard 하기
이전 pipe 를 프로세스가 처리하는 중에 (dup, dup2) 에러가 나면 해당 파이프는 의미가 없어지는데 이 때 연결은 정의하지 않는다.
실제 process 를 실행할 때 execve() 를 위해 argv[0] 의 값을 수정하도록 하기
redirection 처리가 잘 작동하고 있는지 확인하기
>> 와 << 기능 추가하기
기존 코드들을 수정된 token 에 대해 제대로 작동하도록 수정
$? 기능 구현
process 집합의 pipe 도 적절히 close() 되는가? 아니 close() 가 필요하긴 한가?
자식 프로세스가 <C-C> 나 <C-\> 로 종료되었을 때, special character 뒤로 '\n' 출력하기
exit 의 인자에 따른 반환값
EOF 면 exit 을 출력하도록 하기
	man bash 의 exit status 참고하기
check_type.c 에 정의된 함수들의 이름에는 lmt_ 접두사를 붙이지 않을 것인데, 왜 lmt_util.h 에 prototype 을 넣어놓은 것이지?
코드 가독성 높이고 뭔가 있었던 것 같은 오류 해결하기
readline example program 을 돌려보면서 signal 을 적용할 때 global variable 을 어디에 넣어야 할지 생각해보기
만약 자식 프로세스에서 error 가 발생하여 exit(1) 을 하여 종료했을 때, 이를 부모 프로세스에서 감지하고 exit(1) 을 호출할 수 있을까? (반환값을 보고 그걸 판단하는 것이 가능한가?)

제출 전 확인
	t_token.token 을 char *[100] type 으로 설정함에 따라 buffer 영역을 넘어서는 메모리 영역에 접근 가능하다는 주장을 어떻게 생각하는가?
	Makefile 설명해주기
	t_token.token 이 array 이기 때문에 max size 가 존재하고, 이로 인해 array 범위를 초과하여 잘못된 메모리 주소에 접근하는 segmentation fault 가 발생할 수 있는 문제 수정
	get_token_cnt() 에서 '-' 이면 'line++' 를 하고 있는데, 그러지 않아야 할 것 같다.
	malloc() 의 결과가 NULL 인 경우를 처리해줘야 할 것 같다.
	chk_symbol -> is_symbol 어떤가? 의논해보기 array.isEmpty() 와 같은 실사용 예시를 보여주며

test case
	sleep 100 && sdflk
		sleep 100 이 실행되고 끝난 후 다음 command 가 실행된다
	sleep 100 | sdflk
		sleep 100 과 sdflkj 가 동시에 실행되며, sleep 100 은 계속 돌아가는 상태에서 동시에 sdflkj 라는 명령어가 없다는 에러 메세지가 출력된다.

#allowed external functions
{
	readline
	rl_on_new_line
	rl_replace_line
	rl_redisplay
	add_history

	printf
	malloc
	free
	write

	open
	read
	close

	fork
	wait
	waitpid
	wait3
	wait4

	signal
	kill

	exit

	getcwd
	chdir

	stat
	lstat
	fstat

	unlink

	execve

	dup
	dup2

	pipe

	opendir
	readdir
	closedir

	strerror
	errno

	isatty
	ttyname
	ttyslot
	ioctl
	getenv

	tcsetattr
	tcgetattr

	tgetent
	tgetflag
	tgetnum
	tgetstr
	tgoto
	tputs
}

#reference
	[gnu readline library](https://web.mit.edu/gnu/doc/html/rlman_2.html)



C-d 는 EOF 를 만나면 NULL 을 반환하는 readline() 의 특성을 활용한다
C-\ 와 C-c 는 signal 을 활용한다
특히 C-c 는 새로운 prompt 를 newline 에 출력하기 위해 main 과 공유하는 변수를 참조할 필요가 있으므로 global 변수를 활용한다
C-\ 는 빈 함수를 실행하거나 기능하지 않도록 한다
Since some of the definitions in readline.h use the stdio library, the file <stdio.h> should be included before readline.h


#일단 적어
	각종 intro 읽어보기
	link 된 directory 로 이동할 경우 pwd 는 어떻게 출력되어야 하는가?

exit_code 를 lmt_process 에 저장해서 결과 값을 계산하는 것을 더 이해하기 쉽도록 만들기
backup redirection 이 어떻게 작동하고 있는거지?

readline 을 보면서 cli short cut 을 익혀보도록 하자

todo
{
	zsh 의 특징을 적용했던 부분을 bash 의 특성으로 교체하기
	{
		t_lmt_process_list_method.c/lmt_process_execute()
		'cd .. && pwd': parent process 에서 실행된다
		'pwd | cd ..': child process 에서 실행된다
		builtin, non-builtin 따지지 않고 자식 프로세스를 생성하여 실행
			이에 따라 builtin 의 경우 redirection 을 backup 했던 부분을 수행하지 않도록 수정
				하지만, || 나 && 에서는 parent process 에서 작동하므로 redirection 을 backup 해야 하는지 확실히 하기
				앞의 process 의 op 가 파이프라면 child 를 만들어서 실행하고 아니라면 그냥 실행한다
					이를 위해 lmt_process 에 previous 맴버 변수를 추가하자
	}
	backdown 이 어떻게 작동하는지 구체적으로 작성하기 (지금은 뭔가 이상하다, 왜 apply 후 free 를 하고 있지?)
	backup -> new_undo_list, backdown -> undo 로 이름 수정하기
	TYPE_PROCESS_NORMAL 을 TYPE_PROCESS_COMMON 으로 변경하기
	lmt_exit() 을 하지 않도록 수정하기
}

무조건 자식 프로세스를 생성해서 호출하기
init.c/process_init() 의 중간에 process_line() 을 대신하여 lmt_process_manager_execute() 를 삽입하였다. 이를 간단하게 작동 가능하도록 수정하라
t_lmt_process_method.c/lmt_process_set() 에서 t_lmt_token 을 사용하지 않도록 수정하기
t_lmt_process_list_method.c/lmt_process_list_set_by_token_sublist() 에서 t_lmt_token 을 사용하지 않도록 수정하기
seonkim 의 function 을 호출할 때 p_handler 를 인자로 건내주기
tokenization directory 를 Makefile 에 등록하기
<< 와 >> 추가하기
	t_lmt_redirection_method.c/lmt_redirection_new_by_token()
parsing 을 입맛에 맞게 수정하기

before cluster close
{
	바로 exit() 하지 않도록 코드 수정하기
	역시 삭제할 redirection_fd 값을 따로 보관하는 것보다 매번 삭제해야할 때 삭제하는 것이 좋겠다
	각종 파싱 에러 처리
	>> 와 << 구현 ; 도 구현
	t_token 을 마음대로 수정해도 괜찮다
	builtin_execute() 같은 함수를 호출할 때 인자로 t_handle 이 들어간다
		적당히 p_handle->list 를 수정한 후 builtin_execute() 를 실행하자
}

dup2 같은거 에러 처리 할지?

test
{
	echo hi 2>.temp1 there | (ls) && <.temp2 (pwd && echo hi) | cat > .temp3
	echo hi 2>.temp1 there | (ls) ' & ' " | "&& <.temp2 (pwd && echo hi) | cat > .temp3
	'<.temp cd >.temp2': 이후 fd 가 원상 복구되는지
}

token_list 의 last 를 어떻게 설정하며, token_sublist 의 last 는 무엇이어야 하는가?
	TYPE_NONE 이 last 가 되도록 하자(process_list_execute 를 위해)
jeonpark 안에 중심 헤더 파일 만들기
lmt_process_new_by_lmt_token_sublist();
lmt_process_list_set_by_lmt_token_sublist();
lmt_string_array
shell 상에서 new line 을 추가하는 것 처럼 tab 을 삽입하는 방법도 있다
fd 의 값을 dup 하되, 이후 쓰기 및 읽기 에러가 발생 시, 에러 메세지를 출력하도록 하자
'n>file'
	- if 0 <= n <= max: normal operation
	- if n < 0: use as part of command
	- if n < max: occur error
wait problem
t_lmt_token 으로 argv 만들기

testcase
{
	redirection, |, ||, &&, () 혼용
	존재하지 않는 command 가 도중에 존재
}

0, 1, 2 외의 값에 대한 redirection
pipe 의 fd 와 pipe 이전 command 의 redirection 이 어떻게 처리되는지
#define _W_INT(w)	(*(int *)&w)
#define WEXITSTATUS	((_W_INT(x) >> 8) & 0x000000ff)
redirection 으로 큰 숫자가 들어와도 처리가 가능하도록 수정하기
ls | exit
set, env
>> 와 << 알아보기

later team talk
{
	시간 날 때 괄호도 잘라달라고 하자
}

argv 를 입력받아서 excve 등을 실행하는 프로그램
이모지를 바이트 데이터로 수정하기
word splitting (read IFS referencing docs)
파이프로 연결된 process 중 하나라도 존재하지 않는 명령이 들어오면 아무것도 실행되지 않는다
파이프가 올 때 cd 가 안되는 것은 자식 프로세스에서 실행되서 그런가?
리다이렉션도 파싱 가능하도록 수정하기
single quote, double quote, variable expansion
fd 작동 원리 파악하고 max 이하의 (기본 255) fd 도 받도록 하기
process 들은 부모가 모든 자식 process 를 만든다
clear child process 가 종료되지 않는 문제
process 가 여러 개 실행중이면 signal 은 어떻게 작동하지?
fd 가 큰 값이 들어와도 redirection 을 제대로 수행하도록 하기
의존성 체크하기
초기화하지 않은 fd 를 리다이렉션으로 입력한 경우
파이프 앞의 잘못된 커맨드가 종료되거나 실행되지 않거나 하면, 뒤에 있던 커맨드는 stdin 을 어떻게 대하나? cat 의 경우 아무것도 출력하지 않던데
code 상에 unicode character 를 넣지 않더라도 환경변수로 입력받아서 사용하는 방법
readline 을 사용할 때 긴 줄이 들어오면 커서가 carriage return 하는 현상
'<none command> | <command>' 의 경우 command 만 실행된다
'<command> | <none command>' 의 경우 command 만 실행되며 결과 값이 출력되지 않는다
	실패 메세지가 먼저 뜨고 실행되는데, 리다이렉션은 어디로 날라가는거지?
	게다가 동시에 실행되니 뒤에 것이 인자를 받을 필요가 없으면 먼저 실행하면서 종료해버리네?
	만약 '<command> | <none command> | <command>' 이면 뒤의 command 는 먼저 실행이 종료 될 수도 있다
	'sleep 10 | cat' 은 cat 이 종료되지 않고 기다린다
	'sleep 10 | sleep 1' 은 뒤의 sleep 이 먼저 종료된다
		(sleep 이 standard input 을 사용하지 않기 때문에?)
권한이 없는 파일에 redirection 을 시도하면 어떻게 되나?
PATH 에서 프로그램을 search 할 때는 path 의 인자를 앞에서부터 순차적으로 탐색한다
PATH 값을 수정하면서 내 프로그램이 실행되는지, 기본 프로그램이 실행되는지 테스트해보자
leak 검사
wait 중에 signal 을 받을 때 어떻게 할까?
argv 의 문자열 포인터를 다른 문자열 포인터로 치환하면 leak 이 발생할까?
나중에 stat 읽어보고 사용해보기 (inode 등)
stat 을 사용한 파일 검사
'process1 | process2' 에서 process2 는 process1 이 output 하는 것을 기다리는가?
	bash 에서는 일단 한꺼번에 process 를 생성해두기는 한다
close 한 fd 에 write 등을 하면 어떻게 될까?
'command ls' 는 stdard output 이 '/dev/fd/1' 이냐, 다른 파일이냐에 따라 다른 행동을 하는 것 같다
	minishell 을 완성하면 테스트해보자
'ls > test' 를 하면 test 자신의 이름도 ls 로 인해 출력된 것이 저장되지만 크기는 0 으로 나온다
'<<' 는 '<C-D>' 에 어떻게 반응하나?
execve 사용해보기
getenv() 와 envp 의 차이

functions
{
	isatty
	ttyname
	ttyslot
	tgetent
	tgetflag
	tgetnum
	tgetstr
	tgoto
	tputs
}

chdir() 을 하면 'PWD' 환경 변수가 변하는가?
'nice to meet you!' 를 입력하면 다음 prompt 가 스킵되는 현상
envp 와 getenv() 의 차이점
파이프 실제 동작 테스트

type
{
	0: 잘못된 값 -> 바로 오류
	1: 명령어
	2: symbol
}

$PATH parsing
env from argument vs getenv()

export
{
	local variables can be local or environment
	environment variables are part of UNIX
	turn local variable into environment
}

command search rules
{
	built-ins not associated with PATH
	PATH search
}

how the shell parses
{
	read the command
	{
		read one or more lines a needed
		seperate into tokens using space/tabs
		form commands based on token types
	}
	evaluate a command
	{
		expand word tokens(command substitution, parameter expansion)
		split words into fields
		file expansion
		setup redirections, environment
		run command with arguments
	}
}

token types
{
	control operators (||)
	redirection operators (<)
	assignment tokens
	word tokens
}

libft 어떻게 사용해왔는지
conform norm
no error quit
각종 builtin 함수에 대한 공식 설명도 있을까?

팀원과 첫 만남 'seonkim'
{
	pipe 등이 나오기 전까지 cmd flag 를 1 로 유지해서 작동시킨다
	의견 교환 이전에
	{
		no ebelin! 의사 합의를 하지 않도록 해보자
		가볍게 대화 가능한 주제
			subject pdf 의 의미 해석
		가볍게 대화가 불가능한 주제
			stack or heap
			data type
			data structure
			이 경우 가볍게 토론하기보다 깊게 생각해보고, 둘 다 충분히 준비가 되면 이야기를 나누는 방식을 선호한다. 둘 다 잘 모르는 상태에서는 얘기해봤자 가벼운 이야기만 오갈 뿐이라고 생각한다

		어떻게 생각하시는지?
	}
}
