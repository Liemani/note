#teamwork

가장 진행이 매끄러울 것 같은 사람이 진행을 하되, 모든 부담을 안겨주지는 말고, 좋은 의견이 있다면 항상 제시받자
서로의 코드를 비교해보고 한 명의 가장 꼼꼼한 사람이 코드 매니저를 맡자
네임 컨벤션부터 정하기 시작해서 한 사람이 짠 코드처럼 작성해나갈 것입니다.
git pull request 를 사용할 것입니다.
아직 이런 내용들을 잘 모르시더라도 진지하게 배우며 프로그래밍을 해 볼 의사가 있는 분은 연락주세욥.
쉬운 파트는 일부러 넘어가면서 다른 팀원에게 할 일을 만들어주기
작동이 검증된 코드를 추가하는 방식으로 진행
oop 개념을 알고 모듈화를 좋아한다
어느정도로 구현할지 (서브젝트 제한 or 구현하고 싶은 만큼)
상대의 코딩 관심사가 무엇인지 확인해두자
	나는 abstract class 등을 만드는 것을 좋아한다
선택의 기로에 있을 때 모든 팀원이 의견을 제시하도록 한다
같은 fd 에 부모 쓰고 자식 쓰고 하면 다 써지나?
지금 당장 훌륭하지는 않지만 꾸준히 어제보다 나은 자신이 되도록 노력할 수 있는 분
문제가 있을 때 주변을 탓하기 전에 자신의 변화로 다음에 문제가 발생하지 않을 방법을 생각해볼 수 있는 분
의사소통 문제가 발생하더라도 다음에 같은 문제가 발생하지 않을 해결 방안을 탐구하고 적용할 수 있는 분
프로토콜은 여러 사람이 같이 작업하기 위해 꼭 필요하다
	구조체를 프로토콜화하여 내부 데이터를 약속해서 저장하면 다른 사람이 코드를 볼 때 내부 구현을 보면서 구조체 내부에 어떤 값이 들어가는지 확인 할 필요가 없어진다
서로 대화하면서 상처를 받을 수도 있을텐데, 그런 경우에도 서로를 포기하지 않고 서로를 이해하려 노력하며 더 상처를 덜 주는 방법을 배우면서 같이 성장할 수 있는 분
시작한다 -> 하고 싶은 부분을 한다 -> 필요한 부분을 요청한다 -> 완료 or 인수
개인적으로 쓰던 라이브러리 함수를 가져와서 사용하는 경우..?
같이 공통으로 필요한 함수가 있는지 체크하고 정의하기
	한 명이 util 라이브러리를 관리해도 좋을 것 같다
constant file 만들어서 공통된 상수를 사용하도록 하기
여러 명이 협업을 진행하게 되면 코드의 온전성이 중요해질 것 같다
	- 테스트를 하여 온전하게 작동하는 코드인지를 확실하게 하고 추가하는 것이다
테스트 케이스를 만들어두고, 깃에 merge 를 할 때는 그 테스트 케이스를 전부 통과한 코드만 가능하다.
